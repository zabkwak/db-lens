{
	"name": "db-lens",
	"displayName": "db-lens",
	"description": "",
	"version": "0.0.1",
	"engines": {
		"vscode": "^1.94.0"
	},
	"categories": [
		"Other"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "db-lens.helloWorld",
				"title": "Hello World"
			},
			{
				"command": "db-lens.connect",
				"title": "Connect",
				"icon": "$(plug)"
			},
			{
				"command": "db-lens.query",
				"title": "Query",
				"icon": "$(search)"
			},
			{
				"command": "db-lens.reload",
				"title": "Reload",
				"icon": "$(refresh)"
			},
			{
				"command": "db-lens.disconnect",
				"title": "Disconnect",
				"icon": "$(debug-disconnect)"
			},
			{
				"command": "db-lens.configure",
				"title": "Configure",
				"icon": "$(edit)"
			},
			{
				"command": "db-lens.copyToQueryView",
				"title": "Use in DB Lens",
				"icon": "$(copy)"
			},
			{
				"command": "db-lens.addConnection",
				"title": "Add New Connection",
				"icon": "$(add)"
			},
			{
				"command": "db-lens.removeConnection",
				"title": "Remove Connection",
				"icon": "$(trash)"
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "dbLens",
					"title": "DB Lens",
					"icon": "resources/icon.png"
				}
			]
		},
		"views": {
			"dbLens": [
				{
					"id": "dbLensSidebar",
					"name": "DB Lens",
					"icon": "resources/icon.png",
					"type": "tree"
				}
			]
		},
		"menus": {
			"view/item/context": [
				{
					"command": "db-lens.connect",
					"when": "view == dbLensSidebar && viewItem == connection",
					"group": "inline"
				},
				{
					"command": "db-lens.configure",
					"when": "view == dbLensSidebar && viewItem == connection",
					"group": "inline"
				},
				{
					"command": "db-lens.removeConnection",
					"when": "view == dbLensSidebar && viewItem == connection",
					"group": "inline"
				},
				{
					"command": "db-lens.query",
					"when": "view == dbLensSidebar && viewItem == connection.connected",
					"group": "inline"
				},
				{
					"command": "db-lens.reload",
					"when": "view == dbLensSidebar && viewItem == connection.connected",
					"group": "inline"
				},
				{
					"command": "db-lens.disconnect",
					"when": "view == dbLensSidebar && viewItem == connection.connected",
					"group": "inline"
				}
			],
			"view/title": [
				{
					"command": "db-lens.addConnection",
					"group": "navigation"
				}
			]
		},
		"configuration": {
			"title": "DB Lens",
			"properties": {
				"db-lens.baseDir": {
					"title": "Base Directory",
					"type": "string",
					"description": "The base directory for DB Lens."
				},
				"db-lens.portRange": {
					"title": "Port Range",
					"type": "array",
					"minItems": 2,
					"maxItems": 2,
					"items": {
						"type": "integer"
					},
					"description": "Local port range for SSH tunnels in DB Lens.",
					"default": [
						49152,
						65535
					]
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run package",
		"compile": "npm run check-types && npm run lint && node esbuild.js",
		"watch": "npm-run-all -p watch:*",
		"watch:esbuild": "node esbuild.js --watch",
		"watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
		"watch:tests": "tsc -p . -w --outDir out",
		"package": "npm run check-types && npm run lint && node esbuild.js --production",
		"compile-tests": "tsc -p . --outDir out",
		"watch-tests": "tsc -p . -w --outDir out",
		"pretest": "npm run compile-tests && npm run compile && npm run lint",
		"check-types": "tsc --noEmit",
		"lint": "eslint src",
		"test": "./node_modules/.bin/mocha --config .mocharc.js",
		"test:vscode": "npm run pretest && vscode-test",
		"test:coverage:merge": "mkdir -p .nyc_output_combined && cp .nyc_output/*.json .nyc_output_combined/ && cp webview-ui/coverage/coverage-final.json .nyc_output_combined/ && ./node_modules/.bin/nyc merge .nyc_output_combined .nyc_output/coverage.json",
		"test:coverage:report": "./node_modules/.bin/nyc report --nycrc-path=./.nycrc-report.json -t .nyc_output --report-dir coverage",
		"test:coverage:cleanup": "rm -rf .nyc_output_combined && rm -rf .nyc_output && rm -rf webview-ui/coverage",
		"test:coverage:backend:run": "npm run test && (cd e2e && npm run test) && npm run test:vscode",
		"test:coverage:backend": "./node_modules/.bin/nyc npm run test:coverage:backend:run",
		"test:coverage:ui": "(cd webview-ui && npm run test:coverage)",
		"test:coverage": "npm run test:coverage:cleanup && rm -rf coverage && npm run test:coverage:backend && npm run test:coverage:ui && npm run test:coverage:merge && npm run test:coverage:report && npm run test:coverage:cleanup",
		"vscode:test": "npm run test:vscode"
	},
	"devDependencies": {
		"@istanbuljs/nyc-config-typescript": "^1.0.2",
		"@types/chai": "^4.3.20",
		"@types/chai-as-promised": "^7.1.8",
		"@types/mocha": "^10.0.10",
		"@types/mock-require": "^3.0.0",
		"@types/node": "^20.19.9",
		"@types/pg": "^8.11.10",
		"@types/sinon": "^17.0.4",
		"@types/vscode": "^1.94.0",
		"@typescript-eslint/eslint-plugin": "^8.7.0",
		"@typescript-eslint/parser": "^8.7.0",
		"@vscode/test-cli": "^0.0.10",
		"@vscode/test-electron": "^2.4.1",
		"chai": "^4.5.0",
		"chai-as-promised": "^7.1.2",
		"esbuild": "^0.24.0",
		"eslint": "^9.11.1",
		"mocha": "^11.7.1",
		"mock-require": "^3.0.3",
		"npm-run-all": "^4.1.5",
		"nyc": "^17.1.0",
		"sinon": "^21.0.0",
		"source-map-support": "^0.5.21",
		"ts-node": "^10.9.2",
		"typescript": "^5.6.2"
	},
	"dependencies": {
		"pg": "^8.16.3"
	}
}
